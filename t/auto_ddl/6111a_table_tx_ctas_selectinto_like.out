-- This script covers the following CREATE TABLE constructs for AutoDDL:
-- CREATE TABLE in transactions
-- CREATE TABLE AS
-- SELECT .. INTO .. FROM EXISTING
-- CREATE TABLE LIKE
-- Prepared statement for spock.tables so that we can execute it frequently in the script below
PREPARE spocktab AS SELECT nspname, relname, set_name FROM spock.tables WHERE relname = $1 ORDER BY relid;
PREPARE
----------------------------
-- Table DDL in transactions
----------------------------
-- Create Table within transaction, commit
--table should be created successfully (and auto replicated)
BEGIN;
BEGIN
CREATE TABLE sub_tx_table0 (c int primary key);
INFO:  DDL statement replicated.
CREATE TABLE
COMMIT;
COMMIT
\d sub_tx_table0
           Table "public.sub_tx_table0"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 c      | integer |           | not null | 
Indexes:
    "sub_tx_table0_pkey" PRIMARY KEY, btree (c)

EXECUTE spocktab('sub_tx_table0'); --default repset
 nspname |    relname    | set_name 
---------+---------------+----------
 public  | sub_tx_table0 | default
(1 row)

-- DDL within tx, Rollback
-- table will not get created on n1 and therefore nothing should replicate to n2
-- (although the ddl replication INFO message would appear but it should rollback)
BEGIN;
BEGIN
CREATE TABLE sub_tx_table0a (c int);
INFO:  DDL statement replicated.
CREATE TABLE
ROLLBACK;
ROLLBACK
\d sub_tx_table0a
Did not find any relation named "sub_tx_table0a".
EXECUTE spocktab('sub_tx_table0a');
 nspname | relname | set_name 
---------+---------+----------
(0 rows)

--DDL within transaction and savepoints and rollback/commit
--table sub_tx_table1 will not be created so it should not get replicated
BEGIN;
BEGIN
SAVEPOINT a;
SAVEPOINT
CREATE TABLE sub_tx_table1 (c int);
INFO:  DDL statement replicated.
CREATE TABLE
 ALTER TABLE sub_tx_table1 ALTER c TYPE bigint; 
INFO:  DDL statement replicated.
ALTER TABLE
 ROLLBACK TO a;
ROLLBACK
COMMIT;
COMMIT
\d sub_tx_table1
Did not find any relation named "sub_tx_table1".
EXECUTE spocktab('sub_tx_table1');
 nspname | relname | set_name 
---------+---------+----------
(0 rows)

--ALTERING TABLE within transaction, savepoints, rollback
-- After commit, the table should have c column datatype to bigint
CREATE TABLE sub_tx_table2 (c int);
INFO:  DDL statement replicated.
CREATE TABLE
BEGIN;
BEGIN
  ALTER TABLE sub_tx_table2 ALTER c TYPE bigint;
INFO:  DDL statement replicated.
ALTER TABLE
  SAVEPOINT q; 
SAVEPOINT
  DROP TABLE sub_tx_table2; 
NOTICE:  drop cascades to table sub_tx_table2 membership in replication set default_insert_only
INFO:  DDL statement replicated.
DROP TABLE
  ROLLBACK TO q;
ROLLBACK
COMMIT;
COMMIT
\d sub_tx_table2
           Table "public.sub_tx_table2"
 Column |  Type  | Collation | Nullable | Default 
--------+--------+-----------+----------+---------
 c      | bigint |           |          | 

EXECUTE spocktab('sub_tx_table2');
 nspname |    relname    |      set_name       
---------+---------------+---------------------
 public  | sub_tx_table2 | default_insert_only
(1 row)

BEGIN;
BEGIN
CREATE TABLE sub_tx_table3 (a smallint primary key, b real);
INFO:  DDL statement replicated.
CREATE TABLE
INSERT INTO sub_tx_table3 VALUES
  (56, 7.8), (100, 99.097), (0, 0.09561), (42, 324.78), (777, 777.777);
INSERT 0 5
END;
COMMIT
\d sub_tx_table3
            Table "public.sub_tx_table3"
 Column |   Type   | Collation | Nullable | Default 
--------+----------+-----------+----------+---------
 a      | smallint |           | not null | 
 b      | real     |           |          | 
Indexes:
    "sub_tx_table3_pkey" PRIMARY KEY, btree (a)

SELECT * FROM sub_tx_table3 order by a;
  a  |    b    
-----+---------
   0 | 0.09561
  42 |  324.78
  56 |     7.8
 100 |  99.097
 777 | 777.777
(5 rows)

EXECUTE spocktab('sub_tx_table3');
 nspname |    relname    | set_name 
---------+---------------+----------
 public  | sub_tx_table3 | default
(1 row)

BEGIN;
BEGIN
CREATE TABLE sub_tx_table4 (a int4 primary key);
INFO:  DDL statement replicated.
CREATE TABLE
DELETE FROM sub_tx_table3;
DELETE 5
-- should be empty
SELECT count(*) from sub_tx_table3;--0 rows
 count 
-------
     0
(1 row)

ABORT;--rollback
ROLLBACK
--table sub_tx_table4 should not exist
\d sub_tx_table4
Did not find any relation named "sub_tx_table4".
EXECUTE spocktab('sub_tx_table4');
 nspname | relname | set_name 
---------+---------+----------
(0 rows)

SELECT count(*) from sub_tx_table3;--5 rows, which should also exist on n2 (validated in the 6111b file)
 count 
-------
     5
(1 row)

-- Nested transactions with multiple savepoints and a mix of rollbacks and commits
BEGIN;
BEGIN
  CREATE TABLE sub_tx_table5 (c int);
INFO:  DDL statement replicated.
CREATE TABLE
  SAVEPOINT sp3;
SAVEPOINT
  CREATE TABLE sub_tx_table5a (c int primary key);
INFO:  DDL statement replicated.
CREATE TABLE
  SAVEPOINT sp4;
SAVEPOINT
  CREATE TABLE sub_tx_table5b (c int);
INFO:  DDL statement replicated.
CREATE TABLE
  ROLLBACK TO sp4; -- Rolls back the creation of sub_tx_table5b
ROLLBACK
  SAVEPOINT sp5;
SAVEPOINT
  CREATE TABLE sub_tx_table5c (c int);
INFO:  DDL statement replicated.
CREATE TABLE
  COMMIT; -- Commits all changes since the last rollback, sub_tx_table5a and sub_tx_table5c should exist
COMMIT
COMMIT;
WARNING:  there is no transaction in progress
COMMIT
-- Validate sub_tx_table5, sub_tx_table5a, and sub_tx_table5c should exist, sub_tx_table5b should not
\d sub_tx_table5
           Table "public.sub_tx_table5"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 c      | integer |           |          | 

EXECUTE spocktab('sub_tx_table5'); -- should be in default_insert_only set
 nspname |    relname    |      set_name       
---------+---------------+---------------------
 public  | sub_tx_table5 | default_insert_only
(1 row)

\d sub_tx_table5a
           Table "public.sub_tx_table5a"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 c      | integer |           | not null | 
Indexes:
    "sub_tx_table5a_pkey" PRIMARY KEY, btree (c)

EXECUTE spocktab('sub_tx_table5a'); -- should be in default
 nspname |    relname     | set_name 
---------+----------------+----------
 public  | sub_tx_table5a | default
(1 row)

\d sub_tx_table5b
Did not find any relation named "sub_tx_table5b".
EXECUTE spocktab('sub_tx_table5b'); -- should not exist
 nspname | relname | set_name 
---------+---------+----------
(0 rows)

\d sub_tx_table5c
           Table "public.sub_tx_table5c"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 c      | integer |           |          | 

EXECUTE spocktab('sub_tx_table5c'); -- should be in default_insert_only set
 nspname |    relname     |      set_name       
---------+----------------+---------------------
 public  | sub_tx_table5c | default_insert_only
(1 row)

-----------------------
-- CREATE TABLE AS
-----------------------
-- Create a base table for reference
CREATE TABLE table_base1 (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT
);
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert initial data into table_base1
INSERT INTO table_base1 (id, name, age) VALUES
(1, 'Alice', 30),
(2, 'Bob', 25),
(3, 'Carol', 35);
INSERT 0 3
-- Basic CREATE TABLE AS with data
CREATE TABLE table_ctas1 AS
SELECT * FROM table_base1;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 3
-- CREATE TABLE AS with IF NOT EXISTS
CREATE TABLE IF NOT EXISTS table_ctas1 AS
SELECT id, name FROM table_base1;
NOTICE:  relation "table_ctas1" already exists, skipping
WARNING:  DDL statement replicated, but could be unsafe.
CREATE TABLE AS
-- Validate table_ctas1
\d table_ctas1
                   Table "public.table_ctas1"
 Column |         Type          | Collation | Nullable | Default 
--------+-----------------------+-----------+----------+---------
 id     | integer               |           |          | 
 name   | character varying(50) |           |          | 
 age    | integer               |           |          | 

EXECUTE spocktab('table_ctas1'); -- should be in default_insert_only set
 nspname |   relname   |      set_name       
---------+-------------+---------------------
 public  | table_ctas1 | default_insert_only
(1 row)

-- CREATE TABLE AS with specific columns and data
CREATE TABLE IF NOT EXISTS table_ctas2 AS
SELECT id, age FROM table_base1
WHERE age > 30;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 1
-- Add primary key through ALTER TABLE
ALTER TABLE table_ctas2 ADD PRIMARY KEY (id);
INFO:  DDL statement replicated.
ALTER TABLE
-- Validate table_ctas2
\d table_ctas2
            Table "public.table_ctas2"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 id     | integer |           | not null | 
 age    | integer |           |          | 
Indexes:
    "table_ctas2_pkey" PRIMARY KEY, btree (id)

EXECUTE spocktab('table_ctas2'); -- should be in default set
 nspname |   relname   | set_name 
---------+-------------+----------
 public  | table_ctas2 | default
(1 row)

-- CREATE TABLE AS with VALUES clause and primary key
CREATE TABLE table_ctas3 (id, value) AS
VALUES (1, 10), (2, 20), (3, 30);
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 3
ALTER TABLE table_ctas3 ADD PRIMARY KEY (id);
INFO:  DDL statement replicated.
ALTER TABLE
-- Validate table_ctas3
\d table_ctas3
            Table "public.table_ctas3"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 id     | integer |           | not null | 
 value  | integer |           |          | 
Indexes:
    "table_ctas3_pkey" PRIMARY KEY, btree (id)

EXECUTE spocktab('table_ctas3'); -- should be in default set
 nspname |   relname   | set_name 
---------+-------------+----------
 public  | table_ctas3 | default
(1 row)

-- CREATE TABLE AS with query and using WITH NO DATA
CREATE TABLE table_ctas4 AS
SELECT id, name, age * 2 AS double_age FROM table_base1
WHERE age <= 30 WITH NO DATA;
WARNING:  DDL statement replicated, but could be unsafe.
CREATE TABLE AS
-- Validate table_ctas4
\d table_ctas4
                     Table "public.table_ctas4"
   Column   |         Type          | Collation | Nullable | Default 
------------+-----------------------+-----------+----------+---------
 id         | integer               |           |          | 
 name       | character varying(50) |           |          | 
 double_age | integer               |           |          | 

EXECUTE spocktab('table_ctas4'); -- should be in default_insert_only set
 nspname |   relname   |      set_name       
---------+-------------+---------------------
 public  | table_ctas4 | default_insert_only
(1 row)

-- CREATE TABLE AS with expression 
CREATE TABLE table_ctas5 AS
SELECT generate_series(1, 10) AS num;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 10
-- Validate table_ctas5
\d table_ctas5
            Table "public.table_ctas5"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 num    | integer |           |          | 

EXECUTE spocktab('table_ctas5'); -- should be in default_insert_only set
 nspname |   relname   |      set_name       
---------+-------------+---------------------
 public  | table_ctas5 | default_insert_only
(1 row)

-- CREATE TABLE AS with explain analyze, redirecting the output to /dev/null so that the varying query plan is not 
-- captured in the expected output, to keep our output consistent across runs.
\o /dev/null
EXPLAIN ANALYZE CREATE TABLE table_ctas6 AS
SELECT 1 AS a;
INFO:  DDL statement replicated.
\o
/*
TO FIX: 
At present, no repset is assigned for table created through EXPLAIN ANALYZE
https://github.com/orgs/pgEdge/projects/6/views/7?filterQuery=category%3AAutoDDL+&visibleFields=%5B%22Title%22%2C%22Assignees%22%2C%22Status%22%2C77649763%5D&pane=issue&itemId=65421352
*/
-- Validate table_ctas6
\d table_ctas6
            Table "public.table_ctas6"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 a      | integer |           |          | 

EXECUTE spocktab('table_ctas6'); -- should be in default_insert_only set
 nspname |   relname   | set_name 
---------+-------------+----------
 public  | table_ctas6 | 
(1 row)

-----------------------------------
-- Create table using SELECT .. INTO .. 
-----------------------------------
-- Create an existing table for reference
CREATE TABLE table_existing1 (
    id INT PRIMARY KEY,
    column1 TEXT,
    column2 INT,
    column3 DATE,
    column4 BOOLEAN
);
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert initial data into table_existing1
INSERT INTO table_existing1 (id, column1, column2, column3, column4) VALUES
(1, 'value1', 10, '2023-01-01', TRUE),
(2, 'value2', 20, '2023-01-02', FALSE),
(3, 'value3', 30, '2023-01-03', TRUE),
(4, 'value4', 40, '2023-01-04', FALSE);
INSERT 0 4
-- Basic SELECT INTO
SELECT * INTO table_si1 FROM table_existing1;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 4
-- Validate table_si1
\d table_si1
              Table "public.table_si1"
 Column  |  Type   | Collation | Nullable | Default 
---------+---------+-----------+----------+---------
 id      | integer |           |          | 
 column1 | text    |           |          | 
 column2 | integer |           |          | 
 column3 | date    |           |          | 
 column4 | boolean |           |          | 

EXECUTE spocktab('table_si1'); -- should be in default_insert_only set
 nspname |  relname  |      set_name       
---------+-----------+---------------------
 public  | table_si1 | default_insert_only
(1 row)

-- SELECT INTO with specific columns and conditions
SELECT id, column1, column2 INTO table_si2 FROM table_existing1 WHERE column2 > 20;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 2
-- Validate table_si2
\d table_si2
              Table "public.table_si2"
 Column  |  Type   | Collation | Nullable | Default 
---------+---------+-----------+----------+---------
 id      | integer |           |          | 
 column1 | text    |           |          | 
 column2 | integer |           |          | 

EXECUTE spocktab('table_si2'); -- should be in default_insert_only set
 nspname |  relname  |      set_name       
---------+-----------+---------------------
 public  | table_si2 | default_insert_only
(1 row)

-- Expected data: (3, 'value3', 30), (4, 'value4', 40)
-- SELECT INTO with GROUP BY and HAVING
SELECT column4, COUNT(*) AS count INTO table_si3 FROM table_existing1 GROUP BY column4 HAVING COUNT(*) > 1;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 2
-- Validate table_si3
\d table_si3
              Table "public.table_si3"
 Column  |  Type   | Collation | Nullable | Default 
---------+---------+-----------+----------+---------
 column4 | boolean |           |          | 
 count   | bigint  |           |          | 

EXECUTE spocktab('table_si3'); -- should be in default_insert_only set
 nspname |  relname  |      set_name       
---------+-----------+---------------------
 public  | table_si3 | default_insert_only
(1 row)

-- Expected data: (TRUE, 2), (FALSE, 2)
-- SELECT INTO with ORDER BY and LIMIT
SELECT id, column1 INTO table_si4 FROM table_existing1 ORDER BY column2 DESC LIMIT 2;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 2
-- Validate table_si4
\d table_si4
              Table "public.table_si4"
 Column  |  Type   | Collation | Nullable | Default 
---------+---------+-----------+----------+---------
 id      | integer |           |          | 
 column1 | text    |           |          | 

EXECUTE spocktab('table_si4'); -- should be in default_insert_only set
 nspname |  relname  |      set_name       
---------+-----------+---------------------
 public  | table_si4 | default_insert_only
(1 row)

-- Expected data: (4, 'value4'), (3, 'value3')
-- Complex SELECT INTO with JOIN, GROUP BY, ORDER BY, and LIMIT
CREATE TABLE table_existing2 (
    ref_id INT,
    extra_data VARCHAR(50)
);
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert initial data into table_existing2
INSERT INTO table_existing2 (ref_id, extra_data) VALUES
(1, 'extra1'),
(2, 'extra2'),
(3, 'extra3'),
(4, 'extra4');
INSERT 0 4
SELECT e1.id, e1.column1, e2.extra_data INTO table_si5
FROM table_existing1 e1
JOIN table_existing2 e2 ON e1.id = e2.ref_id
WHERE e1.column4 = TRUE
GROUP BY e1.id, e1.column1, e2.extra_data
ORDER BY e1.id
LIMIT 3;
WARNING:  DDL statement replicated, but could be unsafe.
SELECT 2
-- Validate table_si5
\d table_si5
                      Table "public.table_si5"
   Column   |         Type          | Collation | Nullable | Default 
------------+-----------------------+-----------+----------+---------
 id         | integer               |           |          | 
 column1    | text                  |           |          | 
 extra_data | character varying(50) |           |          | 

EXECUTE spocktab('table_si5'); -- should be in default_insert_only set
 nspname |  relname  |      set_name       
---------+-----------+---------------------
 public  | table_si5 | default_insert_only
(1 row)

-- Expected data: (1, 'value1', 'extra1'), (3, 'value3', 'extra3')
---------------------
-- Create table using CREATE TABLE LIKE
--------------------
-- Create base tables with various constraints
-- Base table with primary key and default value
CREATE TABLE table_base1a (
    col1 INT PRIMARY KEY,
    col2 TEXT DEFAULT 'default_text'
);
INFO:  DDL statement replicated.
CREATE TABLE
-- Base table without primary key, but with check constraint and unique constraint
CREATE TABLE table_base2 (
    col1 INT,
    col2 TEXT,
    col3 DATE,
    CONSTRAINT chk_col1 CHECK (col1 > 0),
    UNIQUE (col2)
);
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert initial data into table_base1a
INSERT INTO table_base1a (col1, col2) VALUES (1, 'text1'), (2, 'text2');
INSERT 0 2
-- Insert initial data into table_base2
INSERT INTO table_base2 (col1, col2, col3) VALUES (1, 'unique_text1', '2023-01-01'), (2, 'unique_text2', '2023-01-02');
INSERT 0 2
-- Create table using LIKE including defaults and constraints
CREATE TABLE table_l1 (LIKE table_base1a INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
INFO:  DDL statement replicated.
CREATE TABLE
-- Validate table_l1
-- Expected columns: col1 (without primary key), col2 (with default 'default_text')
\d table_l1
                    Table "public.table_l1"
 Column |  Type   | Collation | Nullable |       Default        
--------+---------+-----------+----------+----------------------
 col1   | integer |           | not null | 
 col2   | text    |           |          | 'default_text'::text

EXECUTE spocktab('table_l1'); -- should be in default_insert_only set
 nspname | relname  |      set_name       
---------+----------+---------------------
 public  | table_l1 | default_insert_only
(1 row)

-- Create table using LIKE excluding defaults
CREATE TABLE table_l2 (LIKE table_base1a EXCLUDING DEFAULTS);
INFO:  DDL statement replicated.
CREATE TABLE
-- Validate table_l2
-- Expected columns: col1 (without primary key), col2 (without default)
\d table_l2
              Table "public.table_l2"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 col1   | integer |           | not null | 
 col2   | text    |           |          | 

EXECUTE spocktab('table_l2'); -- should be in default_insert_only set
 nspname | relname  |      set_name       
---------+----------+---------------------
 public  | table_l2 | default_insert_only
(1 row)

-- Create table using LIKE including all properties
CREATE TABLE table_l3 (LIKE table_base2 INCLUDING ALL);
INFO:  DDL statement replicated.
CREATE TABLE
-- Validate table_l3
-- Expected columns: col1, col2, col3 (with check constraint and unique constraint)
\d table_l3
              Table "public.table_l3"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 col1   | integer |           |          | 
 col2   | text    |           |          | 
 col3   | date    |           |          | 
Indexes:
    "table_l3_col2_key" UNIQUE CONSTRAINT, btree (col2)
Check constraints:
    "chk_col1" CHECK (col1 > 0)

EXECUTE spocktab('table_l3'); -- should be in default_insert_only set
 nspname | relname  |      set_name       
---------+----------+---------------------
 public  | table_l3 | default_insert_only
(1 row)

-- Create table using LIKE excluding constraints
CREATE TABLE table_l4 (LIKE table_base2 EXCLUDING CONSTRAINTS);
INFO:  DDL statement replicated.
CREATE TABLE
-- Validate table_l4
-- Expected columns: col1, col2, col3 (without constraints)
\d table_l4
              Table "public.table_l4"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 col1   | integer |           |          | 
 col2   | text    |           |          | 
 col3   | date    |           |          | 

EXECUTE spocktab('table_l4'); -- should be in default_insert_only set
 nspname | relname  |      set_name       
---------+----------+---------------------
 public  | table_l4 | default_insert_only
(1 row)

-- Create table using LIKE including indexes
CREATE TABLE table_l5 (LIKE table_base1a INCLUDING INDEXES);
INFO:  DDL statement replicated.
CREATE TABLE
-- Validate table_l5
-- Expected columns: col1 (primary key), col2 (without default), indexes copied
\d table_l5
              Table "public.table_l5"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 col1   | integer |           | not null | 
 col2   | text    |           |          | 
Indexes:
    "table_l5_pkey" PRIMARY KEY, btree (col1)

EXECUTE spocktab('table_l5'); -- should be in default set
 nspname | relname  | set_name 
---------+----------+----------
 public  | table_l5 | default
(1 row)

-- Insert data into the LIKE created tables to validate defaults and constraints
INSERT INTO table_l1 (col1) VALUES (3);
INSERT 0 1
INSERT INTO table_l2 (col1, col2) VALUES (4, 'text4');
INSERT 0 1
INSERT INTO table_l3 (col1, col2, col3) VALUES (3, 'unique_text3', '2023-01-03');
INSERT 0 1
INSERT INTO table_l4 (col1, col2, col3) VALUES (4, 'text4', '2023-01-04');
INSERT 0 1
INSERT INTO table_l5 (col1) VALUES (5);
INSERT 0 1
-- Validate data in table_l1 , Expected data: (3, 'default_text')
SELECT * FROM table_l1;
 col1 |     col2     
------+--------------
    3 | default_text
(1 row)

-- Validate data in table_l2 , Expected data: (4, 'text4')
SELECT * FROM table_l2;
 col1 | col2  
------+-------
    4 | text4
(1 row)

-- Validate data in table_l3 , Expected data: (3, 'unique_text3', '2023-01-03')
SELECT * FROM table_l3;
 col1 |     col2     |    col3    
------+--------------+------------
    3 | unique_text3 | 2023-01-03
(1 row)

-- Validate data in table_l4 ,  Expected data: (4, 'text4', '2023-01-04')
SELECT * FROM table_l4;
 col1 | col2  |    col3    
------+-------+------------
    4 | text4 | 2023-01-04
(1 row)

-- Validate data in table_l5, Expected data: (5, )
SELECT * FROM table_l5;
 col1 | col2 
------+------
    5 | 
(1 row)

