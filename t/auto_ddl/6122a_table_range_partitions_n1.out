-- Prepared statement for spock.tables to list parent and child tables as parent table name will be contained in partition name
PREPARE spocktab AS SELECT nspname, relname, set_name FROM spock.tables WHERE relname LIKE '%' || $1 || '%' ORDER BY relid;
PREPARE
--------------------------------
-- Range Partitioned Tables
--------------------------------
-- Create a range partitioned table with primary key
CREATE TABLE sales_range (
    sale_id INT,
    sale_date DATE,
    amount DECIMAL,
    PRIMARY KEY (sale_id, sale_date)
) PARTITION BY RANGE (sale_date);
INFO:  DDL statement replicated.
CREATE TABLE
-- Add partitions to the range partitioned table
CREATE TABLE sales_range_2021 PARTITION OF sales_range
    FOR VALUES FROM ('2021-01-01') TO ('2022-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
CREATE TABLE sales_range_2022 PARTITION OF sales_range
    FOR VALUES FROM ('2022-01-01') TO ('2023-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert data into range partitioned table
INSERT INTO sales_range (sale_id, sale_date, amount) VALUES
(1, '2021-03-15', 150.00), 
(2, '2021-07-21', 200.00), 
(3, '2022-02-10', 250.00);
INSERT 0 3
-- Validate structure and data
EXECUTE spocktab('sales_range'); -- Expect both parent and child tables in default set
 nspname |     relname      | set_name 
---------+------------------+----------
 public  | sales_range      | default
 public  | sales_range_2021 | default
 public  | sales_range_2022 | default
(3 rows)

SELECT * FROM sales_range ORDER BY sale_id; -- Expect 3 rows sorted by sale_id
 sale_id | sale_date  | amount 
---------+------------+--------
       1 | 2021-03-15 | 150.00
       2 | 2021-07-21 | 200.00
       3 | 2022-02-10 | 250.00
(3 rows)

-- Create another range partitioned table without primary key
CREATE TABLE revenue_range (
    rev_id INT,
    rev_date DATE,
    revenue DECIMAL
) PARTITION BY RANGE (rev_date);
INFO:  DDL statement replicated.
CREATE TABLE
-- Add partitions to the new range partitioned table
CREATE TABLE revenue_range_2021 PARTITION OF revenue_range
    FOR VALUES FROM ('2021-01-01') TO ('2022-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
CREATE TABLE revenue_range_2022 PARTITION OF revenue_range
    FOR VALUES FROM ('2022-01-01') TO ('2023-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert data into the new range partitioned table
INSERT INTO revenue_range (rev_id, rev_date, revenue) VALUES
(101, '2021-04-12', 300.00),
(102, '2022-05-18', 400.00);
INSERT 0 2
-- Validate structure and data
EXECUTE spocktab('revenue_range'); -- Expect both parent and child tables in default_insert_only set
 nspname |      relname       |      set_name       
---------+--------------------+---------------------
 public  | revenue_range      | default_insert_only
 public  | revenue_range_2021 | default_insert_only
 public  | revenue_range_2022 | default_insert_only
(3 rows)

SELECT * FROM revenue_range ORDER BY rev_id; -- Expect 2 rows sorted by rev_id
 rev_id |  rev_date  | revenue 
--------+------------+---------
    101 | 2021-04-12 |  300.00
    102 | 2022-05-18 |  400.00
(2 rows)

-- Alter table to add a new partition
CREATE TABLE sales_range_2023 PARTITION OF sales_range
    FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
\d+ sales_range_2023
                                      Table "public.sales_range_2023"
  Column   |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 sale_id   | integer |           | not null |         | plain   |             |              | 
 sale_date | date    |           | not null |         | plain   |             |              | 
 amount    | numeric |           |          |         | main    |             |              | 
Partition of: sales_range FOR VALUES FROM ('2023-01-01') TO ('2024-01-01')
Partition constraint: ((sale_date IS NOT NULL) AND (sale_date >= '2023-01-01'::date) AND (sale_date < '2024-01-01'::date))
Indexes:
    "sales_range_2023_pkey" PRIMARY KEY, btree (sale_id, sale_date)
Access method: heap

EXECUTE spocktab('sales_range'); -- Expect sales_range_2023 in default set
 nspname |     relname      | set_name 
---------+------------------+----------
 public  | sales_range      | default
 public  | sales_range_2021 | default
 public  | sales_range_2022 | default
 public  | sales_range_2023 | default
(4 rows)

-- Add a primary key to a range partitioned table that initially didn't have one
ALTER TABLE revenue_range ADD PRIMARY KEY (rev_id, rev_date);
INFO:  DDL statement replicated.
ALTER TABLE
\d revenue_range
      Partitioned table "public.revenue_range"
  Column  |  Type   | Collation | Nullable | Default 
----------+---------+-----------+----------+---------
 rev_id   | integer |           | not null | 
 rev_date | date    |           | not null | 
 revenue  | numeric |           |          | 
Partition key: RANGE (rev_date)
Indexes:
    "revenue_range_pkey" PRIMARY KEY, btree (rev_id, rev_date)
Number of partitions: 2 (Use \d+ to list them.)

/*TO FIX:
At present, adding a parimary key to parent table does not move the partitions to default repset.
To revisit and update outputs once this is addressed
https://github.com/orgs/pgEdge/projects/6/views/7?filterQuery=category%3AAutoDDL+&visibleFields=%5B%22Title%22%2C%22Assignees%22%2C%22Status%22%2C77649763%5D&pane=issue&itemId=69962278
*/
EXECUTE spocktab('revenue_range'); -- Expect revenue_range and all child partitions to move to default set
 nspname |      relname       |      set_name       
---------+--------------------+---------------------
 public  | revenue_range      | default
 public  | revenue_range_2021 | default_insert_only
 public  | revenue_range_2022 | default_insert_only
(3 rows)

-- Add another partition to the modified table
CREATE TABLE revenue_range_2023 PARTITION OF revenue_range
    FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
\d+ revenue_range_2023
                                    Table "public.revenue_range_2023"
  Column  |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 rev_id   | integer |           | not null |         | plain   |             |              | 
 rev_date | date    |           | not null |         | plain   |             |              | 
 revenue  | numeric |           |          |         | main    |             |              | 
Partition of: revenue_range FOR VALUES FROM ('2023-01-01') TO ('2024-01-01')
Partition constraint: ((rev_date IS NOT NULL) AND (rev_date >= '2023-01-01'::date) AND (rev_date < '2024-01-01'::date))
Indexes:
    "revenue_range_2023_pkey" PRIMARY KEY, btree (rev_id, rev_date)
Access method: heap

EXECUTE spocktab('revenue_range'); -- Expect revenue_range_2023 in default set
 nspname |      relname       |      set_name       
---------+--------------------+---------------------
 public  | revenue_range      | default
 public  | revenue_range_2021 | default_insert_only
 public  | revenue_range_2022 | default_insert_only
 public  | revenue_range_2023 | default
(4 rows)

-- Insert data into the newly added partitions
INSERT INTO sales_range (sale_id, sale_date, amount) VALUES
(4, '2023-03-22', 300.00);
INSERT 0 1
INSERT INTO revenue_range (rev_id, rev_date, revenue) VALUES
(103, '2023-07-15', 500.00);
INSERT 0 1
-- Create an additional range partitioned table with indexes and keys
CREATE TABLE orders_range (
    order_id INT,
    order_date DATE,
    customer_id INT,
    total DECIMAL,
    PRIMARY KEY (order_id, order_date)
) PARTITION BY RANGE (order_date);
INFO:  DDL statement replicated.
CREATE TABLE
-- Add partitions to the orders_range table
CREATE TABLE orders_range_2021 PARTITION OF orders_range
    FOR VALUES FROM ('2021-01-01') TO ('2022-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
CREATE TABLE orders_range_2022 PARTITION OF orders_range
    FOR VALUES FROM ('2022-01-01') TO ('2023-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert data into the orders_range table
INSERT INTO orders_range (order_id, order_date, customer_id, total) VALUES
(1001, '2021-06-15', 1, 500.00),
(1002, '2022-01-10', 2, 1000.00);
INSERT 0 2
-- Validate structure and data
EXECUTE spocktab('orders_range'); -- Expect both parent and child tables in default set
 nspname |      relname      | set_name 
---------+-------------------+----------
 public  | orders_range      | default
 public  | orders_range_2021 | default
 public  | orders_range_2022 | default
(3 rows)

SELECT * FROM orders_range ORDER BY order_id; -- Expect 2 rows 
 order_id | order_date | customer_id |  total  
----------+------------+-------------+---------
     1001 | 2021-06-15 |           1 |  500.00
     1002 | 2022-01-10 |           2 | 1000.00
(2 rows)

-- Drop a partition
ALTER TABLE sales_range DETACH PARTITION sales_range_2023;
INFO:  DDL statement replicated.
ALTER TABLE
EXECUTE spocktab('sales_range'); --should still have the repset assigned
 nspname |     relname      | set_name 
---------+------------------+----------
 public  | sales_range      | default
 public  | sales_range_2021 | default
 public  | sales_range_2022 | default
 public  | sales_range_2023 | default
(4 rows)

DROP TABLE sales_range_2023;
NOTICE:  drop cascades to table sales_range_2023 membership in replication set default
INFO:  DDL statement replicated.
DROP TABLE
EXECUTE spocktab('sales_range'); -- validate sales_range_2023 to be removed 
 nspname |     relname      | set_name 
---------+------------------+----------
 public  | sales_range      | default
 public  | sales_range_2021 | default
 public  | sales_range_2022 | default
(3 rows)

-- Create a range partitioned table with default partition
CREATE TABLE inventory_range (
    product_id INT,
    product_date DATE,
    quantity BIGINT,
    PRIMARY KEY (product_id, product_date)
) PARTITION BY RANGE (product_date);
INFO:  DDL statement replicated.
CREATE TABLE
-- Add partitions to the inventory_range table
CREATE TABLE inventory_range_2021 PARTITION OF inventory_range
    FOR VALUES FROM ('2021-01-01') TO ('2022-01-01');
INFO:  DDL statement replicated.
CREATE TABLE
CREATE TABLE inventory_range_default PARTITION OF inventory_range
    DEFAULT;
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert data into the inventory_range table
INSERT INTO inventory_range (product_id, product_date, quantity) VALUES
(1, '2021-06-15', 50),
(2, '2022-02-10', 100); -- Should go to default partition
INSERT 0 2
-- Validate structure and data
EXECUTE spocktab('inventory_range'); -- Expect both parent and child tables in default set
 nspname |         relname         | set_name 
---------+-------------------------+----------
 public  | inventory_range         | default
 public  | inventory_range_2021    | default
 public  | inventory_range_default | default
(3 rows)

SELECT * FROM inventory_range ORDER BY product_id; -- Expect 2 rows
 product_id | product_date | quantity 
------------+--------------+----------
          1 | 2021-06-15   |       50
          2 | 2022-02-10   |      100
(2 rows)

-- Alter the inventory_range table to add a new column and change data type
ALTER TABLE inventory_range ADD COLUMN price DECIMAL;
INFO:  DDL statement replicated.
ALTER TABLE
ALTER TABLE inventory_range ALTER COLUMN quantity TYPE BIGINT;
INFO:  DDL statement replicated.
ALTER TABLE
-- Add a constraint to the inventory_range_2021 partition
ALTER TABLE inventory_range_2021 ADD CONSTRAINT chk_quantity CHECK (quantity >= 0);
INFO:  DDL statement replicated.
ALTER TABLE
-- Insert data that falls outside the defined range
INSERT INTO inventory_range (product_id, product_date, quantity) VALUES
(3, '2025-01-01', 150); -- Should go to default partition
INSERT 0 1
-- Attaching and detaching partitions
-- Create a standalone table with matching columns and types, with NOT NULL constraints and without a primary key
CREATE TABLE inventory_standalone (
    product_id INT NOT NULL,
    product_date DATE NOT NULL,
    quantity BIGINT,
    price DECIMAL
);
INFO:  DDL statement replicated.
CREATE TABLE
-- Insert data into the standalone table
INSERT INTO inventory_standalone (product_id, product_date, quantity, price) VALUES
(4, '2023-03-15', 200, 19.99);
INSERT 0 1
-- Attach the standalone table as a partition
ALTER TABLE inventory_range ATTACH PARTITION inventory_standalone FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');
INFO:  DDL statement replicated.
ALTER TABLE
-- Validate structure and data
EXECUTE spocktab('inventory'); -- Expect inventory_standalone to be listed
 nspname |         relname         |      set_name       
---------+-------------------------+---------------------
 public  | inventory_range         | default
 public  | inventory_range_2021    | default
 public  | inventory_range_default | default
 public  | inventory_standalone    | default_insert_only
(4 rows)

SELECT * FROM inventory_standalone ORDER BY product_id; -- Expect 1 row
 product_id | product_date | quantity | price 
------------+--------------+----------+-------
          4 | 2023-03-15   |      200 | 19.99
(1 row)

-- Validate final data
SELECT * FROM sales_range ORDER BY sale_id; -- Expect all rows
 sale_id | sale_date  | amount 
---------+------------+--------
       1 | 2021-03-15 | 150.00
       2 | 2021-07-21 | 200.00
       3 | 2022-02-10 | 250.00
(3 rows)

SELECT * FROM revenue_range ORDER BY rev_id; -- Expect all rows
 rev_id |  rev_date  | revenue 
--------+------------+---------
    101 | 2021-04-12 |  300.00
    102 | 2022-05-18 |  400.00
    103 | 2023-07-15 |  500.00
(3 rows)

SELECT * FROM orders_range ORDER BY order_id; -- Expect all rows
 order_id | order_date | customer_id |  total  
----------+------------+-------------+---------
     1001 | 2021-06-15 |           1 |  500.00
     1002 | 2022-01-10 |           2 | 1000.00
(2 rows)

SELECT * FROM inventory_range_default ORDER BY product_id; -- Expect 2 rows
 product_id | product_date | quantity | price 
------------+--------------+----------+-------
          2 | 2022-02-10   |      100 |      
          3 | 2025-01-01   |      150 |      
(2 rows)

SELECT * FROM inventory_standalone ORDER BY product_id; -- Expect 1 row
 product_id | product_date | quantity | price 
------------+--------------+----------+-------
          4 | 2023-03-15   |      200 | 19.99
(1 row)

-- Validate final structure
\d+ sales_range
                                  Partitioned table "public.sales_range"
  Column   |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 sale_id   | integer |           | not null |         | plain   |             |              | 
 sale_date | date    |           | not null |         | plain   |             |              | 
 amount    | numeric |           |          |         | main    |             |              | 
Partition key: RANGE (sale_date)
Indexes:
    "sales_range_pkey" PRIMARY KEY, btree (sale_id, sale_date)
Partitions: sales_range_2021 FOR VALUES FROM ('2021-01-01') TO ('2022-01-01'),
            sales_range_2022 FOR VALUES FROM ('2022-01-01') TO ('2023-01-01')

\d+ sales_range_2021
                                      Table "public.sales_range_2021"
  Column   |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 sale_id   | integer |           | not null |         | plain   |             |              | 
 sale_date | date    |           | not null |         | plain   |             |              | 
 amount    | numeric |           |          |         | main    |             |              | 
Partition of: sales_range FOR VALUES FROM ('2021-01-01') TO ('2022-01-01')
Partition constraint: ((sale_date IS NOT NULL) AND (sale_date >= '2021-01-01'::date) AND (sale_date < '2022-01-01'::date))
Indexes:
    "sales_range_2021_pkey" PRIMARY KEY, btree (sale_id, sale_date)
Access method: heap

\d+ sales_range_2022
                                      Table "public.sales_range_2022"
  Column   |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 sale_id   | integer |           | not null |         | plain   |             |              | 
 sale_date | date    |           | not null |         | plain   |             |              | 
 amount    | numeric |           |          |         | main    |             |              | 
Partition of: sales_range FOR VALUES FROM ('2022-01-01') TO ('2023-01-01')
Partition constraint: ((sale_date IS NOT NULL) AND (sale_date >= '2022-01-01'::date) AND (sale_date < '2023-01-01'::date))
Indexes:
    "sales_range_2022_pkey" PRIMARY KEY, btree (sale_id, sale_date)
Access method: heap

\d+ sales_range_2023
Did not find any relation named "sales_range_2023".
\d+ revenue_range
                                 Partitioned table "public.revenue_range"
  Column  |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 rev_id   | integer |           | not null |         | plain   |             |              | 
 rev_date | date    |           | not null |         | plain   |             |              | 
 revenue  | numeric |           |          |         | main    |             |              | 
Partition key: RANGE (rev_date)
Indexes:
    "revenue_range_pkey" PRIMARY KEY, btree (rev_id, rev_date)
Partitions: revenue_range_2021 FOR VALUES FROM ('2021-01-01') TO ('2022-01-01'),
            revenue_range_2022 FOR VALUES FROM ('2022-01-01') TO ('2023-01-01'),
            revenue_range_2023 FOR VALUES FROM ('2023-01-01') TO ('2024-01-01')

\d+ revenue_range_2021
                                    Table "public.revenue_range_2021"
  Column  |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 rev_id   | integer |           | not null |         | plain   |             |              | 
 rev_date | date    |           | not null |         | plain   |             |              | 
 revenue  | numeric |           |          |         | main    |             |              | 
Partition of: revenue_range FOR VALUES FROM ('2021-01-01') TO ('2022-01-01')
Partition constraint: ((rev_date IS NOT NULL) AND (rev_date >= '2021-01-01'::date) AND (rev_date < '2022-01-01'::date))
Indexes:
    "revenue_range_2021_pkey" PRIMARY KEY, btree (rev_id, rev_date)
Access method: heap

\d+ revenue_range_2022
                                    Table "public.revenue_range_2022"
  Column  |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
----------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 rev_id   | integer |           | not null |         | plain   |             |              | 
 rev_date | date    |           | not null |         | plain   |             |              | 
 revenue  | numeric |           |          |         | main    |             |              | 
Partition of: revenue_range FOR VALUES FROM ('2022-01-01') TO ('2023-01-01')
Partition constraint: ((rev_date IS NOT NULL) AND (rev_date >= '2022-01-01'::date) AND (rev_date < '2023-01-01'::date))
Indexes:
    "revenue_range_2022_pkey" PRIMARY KEY, btree (rev_id, rev_date)
Access method: heap

\d orders_range
        Partitioned table "public.orders_range"
   Column    |  Type   | Collation | Nullable | Default 
-------------+---------+-----------+----------+---------
 order_id    | integer |           | not null | 
 order_date  | date    |           | not null | 
 customer_id | integer |           |          | 
 total       | numeric |           |          | 
Partition key: RANGE (order_date)
Indexes:
    "orders_range_pkey" PRIMARY KEY, btree (order_id, order_date)
Number of partitions: 2 (Use \d+ to list them.)

\d+ orders_range
                                   Partitioned table "public.orders_range"
   Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 order_id    | integer |           | not null |         | plain   |             |              | 
 order_date  | date    |           | not null |         | plain   |             |              | 
 customer_id | integer |           |          |         | plain   |             |              | 
 total       | numeric |           |          |         | main    |             |              | 
Partition key: RANGE (order_date)
Indexes:
    "orders_range_pkey" PRIMARY KEY, btree (order_id, order_date)
Partitions: orders_range_2021 FOR VALUES FROM ('2021-01-01') TO ('2022-01-01'),
            orders_range_2022 FOR VALUES FROM ('2022-01-01') TO ('2023-01-01')

\d+ orders_range_2021
                                      Table "public.orders_range_2021"
   Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 order_id    | integer |           | not null |         | plain   |             |              | 
 order_date  | date    |           | not null |         | plain   |             |              | 
 customer_id | integer |           |          |         | plain   |             |              | 
 total       | numeric |           |          |         | main    |             |              | 
Partition of: orders_range FOR VALUES FROM ('2021-01-01') TO ('2022-01-01')
Partition constraint: ((order_date IS NOT NULL) AND (order_date >= '2021-01-01'::date) AND (order_date < '2022-01-01'::date))
Indexes:
    "orders_range_2021_pkey" PRIMARY KEY, btree (order_id, order_date)
Access method: heap

\d+ orders_range_2022
                                      Table "public.orders_range_2022"
   Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
-------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 order_id    | integer |           | not null |         | plain   |             |              | 
 order_date  | date    |           | not null |         | plain   |             |              | 
 customer_id | integer |           |          |         | plain   |             |              | 
 total       | numeric |           |          |         | main    |             |              | 
Partition of: orders_range FOR VALUES FROM ('2022-01-01') TO ('2023-01-01')
Partition constraint: ((order_date IS NOT NULL) AND (order_date >= '2022-01-01'::date) AND (order_date < '2023-01-01'::date))
Indexes:
    "orders_range_2022_pkey" PRIMARY KEY, btree (order_id, order_date)
Access method: heap

\d+ inventory_range
                                  Partitioned table "public.inventory_range"
    Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
--------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 product_id   | integer |           | not null |         | plain   |             |              | 
 product_date | date    |           | not null |         | plain   |             |              | 
 quantity     | bigint  |           |          |         | plain   |             |              | 
 price        | numeric |           |          |         | main    |             |              | 
Partition key: RANGE (product_date)
Indexes:
    "inventory_range_pkey" PRIMARY KEY, btree (product_id, product_date)
Partitions: inventory_range_2021 FOR VALUES FROM ('2021-01-01') TO ('2022-01-01'),
            inventory_standalone FOR VALUES FROM ('2023-01-01') TO ('2024-01-01'),
            inventory_range_default DEFAULT

\d+ inventory_range_2021
                                     Table "public.inventory_range_2021"
    Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
--------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 product_id   | integer |           | not null |         | plain   |             |              | 
 product_date | date    |           | not null |         | plain   |             |              | 
 quantity     | bigint  |           |          |         | plain   |             |              | 
 price        | numeric |           |          |         | main    |             |              | 
Partition of: inventory_range FOR VALUES FROM ('2021-01-01') TO ('2022-01-01')
Partition constraint: ((product_date IS NOT NULL) AND (product_date >= '2021-01-01'::date) AND (product_date < '2022-01-01'::date))
Indexes:
    "inventory_range_2021_pkey" PRIMARY KEY, btree (product_id, product_date)
Check constraints:
    "chk_quantity" CHECK (quantity >= 0)
Access method: heap

\d+ inventory_range_default
                                    Table "public.inventory_range_default"
    Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
--------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 product_id   | integer |           | not null |         | plain   |             |              | 
 product_date | date    |           | not null |         | plain   |             |              | 
 quantity     | bigint  |           |          |         | plain   |             |              | 
 price        | numeric |           |          |         | main    |             |              | 
Partition of: inventory_range DEFAULT
Partition constraint: (NOT ((product_date IS NOT NULL) AND (((product_date >= '2021-01-01'::date) AND (product_date < '2022-01-01'::date)) OR ((product_date >= '2023-01-01'::date) AND (product_date < '2024-01-01'::date)))))
Indexes:
    "inventory_range_default_pkey" PRIMARY KEY, btree (product_id, product_date)
Access method: heap

\d+ inventory_standalone
                                     Table "public.inventory_standalone"
    Column    |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description 
--------------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 product_id   | integer |           | not null |         | plain   |             |              | 
 product_date | date    |           | not null |         | plain   |             |              | 
 quantity     | bigint  |           |          |         | plain   |             |              | 
 price        | numeric |           |          |         | main    |             |              | 
Partition of: inventory_range FOR VALUES FROM ('2023-01-01') TO ('2024-01-01')
Partition constraint: ((product_date IS NOT NULL) AND (product_date >= '2023-01-01'::date) AND (product_date < '2024-01-01'::date))
Indexes:
    "inventory_standalone_pkey" PRIMARY KEY, btree (product_id, product_date)
Access method: heap

